[
	{
		"back": "type ls",
		"category": "linux",
		"extras": "",
		"front": "find out what kind of command a command is, e.g. `ls`",
		"id": 19,
		"importId": "findOutWhatKindOfCommandACommandIsEgLs_typeLs",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-08-31 07:08:18",
		"lastTested": "2019-08-31 07:08:18",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.38",
		"status": "learned",
		"systemWhenCreated": "2019-08-30 07:43:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "echo $0",
		"category": "linux",
		"extras": "",
		"front": "how to find out your shell\t\t",
		"id": 20,
		"importId": "howToFindOutYourShell_echo",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-08-31 07:13:45",
		"lastTested": "2019-08-31 07:13:45",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.5",
		"status": "learned",
		"systemWhenCreated": "2019-08-30 07:43:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ll",
		"category": "linux",
		"extras": "",
		"front": "how to get a detailed list of files in a directory",
		"id": 21,
		"importId": "howToGetADetailedListOfFilesInADirectory_ll",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-08-31 07:08:22",
		"lastTested": "2019-08-31 07:08:22",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.84",
		"status": "learned",
		"systemWhenCreated": "2019-08-30 07:43:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git reset [file]",
		"category": "git",
		"extras": "",
		"front": "get back file from staging area to working directory, i.e. unstage a file",
		"id": 1658,
		"importId": "getBackFileFromStagingAreaToWorkingDirectory_gitResetFile",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-10-29 08:21:09",
		"lastTested": "2019-10-29 08:21:09",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.73",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 05:48:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --pretty=format:\"%h - %s - %an\" ",
		"category": "git",
		"extras": "",
		"front": "show simplified log \"hash - title - author\"",
		"id": 1659,
		"importId": "showSimplifiedLog_gitLogPrettyformathSAn",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 08:58:02",
		"lastTested": "2020-05-06 08:58:02",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 9,
		"pronunciation": "",
		"rank": "4.77",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 05:48:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git checkout -- [file]",
		"category": "git",
		"extras": "",
		"front": "discard changes in working directory (before add)",
		"id": 1660,
		"importId": "discardChangesInWorkingDirectoryBeforeAdd_gitCheckoutFile",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-10-29 07:14:06",
		"lastTested": "2019-10-29 07:14:06",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.64",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 05:48:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git rm [file]",
		"category": "git",
		"extras": "",
		"front": "remove file from working directory and add deletion to staging area",
		"id": 1661,
		"importId": "removeFileFromWorkingDirectoryAndAddDeletionToStagingArea_gitRmFile",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-10-29 07:43:38",
		"lastTested": "2019-10-29 07:43:38",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.74",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 06:33:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git remote show origin` (you have to login)",
		"category": "git",
		"extras": "",
		"front": "how to find out what the master is",
		"id": 1662,
		"importId": "howToFindOutWhatTheMasterIs_gitRemoteShowOriginYouHaveToLogin",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 06:03:08",
		"lastTested": "2020-06-08 06:03:08",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 5,
		"pronunciation": "",
		"rank": "3.79",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 06:33:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git reflog",
		"category": "git",
		"extras": "",
		"front": "list operations made on local repository",
		"id": 1663,
		"importId": "listOperationsMadeOnLocalRepository_gitReflog",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2019-11-29 02:16:14",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "2.76",
		"status": "testing",
		"systemWhenCreated": "2019-10-29 06:33:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git stash save pdf-junk`, `git stash list`, `git stash pop`, `git stash pop stash@{0}`, `get stash drop`",
		"category": "git",
		"extras": "",
		"front": "save local copy temporarily",
		"id": 1664,
		"importId": "saveLocalCopyTemporarily_gitStashGitStashPopGetStashDrop",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-13 09:44:55",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 9,
		"pronunciation": "",
		"rank": "4.36",
		"status": "removed",
		"systemWhenCreated": "2019-10-29 06:33:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git clone https://github.com/edwardtanguay/testinfo.git test001",
		"category": "git",
		"extras": "",
		"front": "how to get Github project locally",
		"id": 1665,
		"importId": "howToGetGithubProjectLocally_gitCloneHttpsgithubcomedwardtanguaytestinfogitTest1",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 08:42:24",
		"lastTested": "2020-05-13 08:42:24",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 6,
		"pronunciation": "",
		"rank": "4.25",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 07:03:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git pull, git push",
		"category": "git",
		"extras": "",
		"front": "how to get updates from Github code locally and copy back up",
		"id": 1666,
		"importId": "howToGetUpdatesFromGithubCodeLocallyAndCopyBackUp_gitPullGitPush",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-10-29 07:43:11",
		"lastTested": "2019-10-29 07:43:11",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.77",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 07:03:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git config --global user.name \"Hans Schmidt\"",
		"category": "git",
		"extras": "",
		"front": "change user name",
		"id": 1667,
		"importId": "changeUserName_gitConfigGlobalUsernameHansSchmidt",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-11-27 11:11:35",
		"lastTested": "2019-11-27 11:11:35",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 10,
		"pronunciation": "",
		"rank": "4.5",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 08:20:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git push origin :issue001",
		"category": "git",
		"extras": "",
		"front": "delete branch on Github",
		"id": 1668,
		"importId": "deleteBranchOnGithub_gitPushOriginIssue1",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2019-10-29 20:24:15",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.5",
		"status": "testing",
		"systemWhenCreated": "2019-10-29 08:20:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git config --global user.email \"hans@nnn.com\"",
		"category": "git",
		"extras": "",
		"front": "change email ",
		"id": 1669,
		"importId": "changeEmail_gitConfigGlobalUseremailHansnnncom",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-10-30 12:08:10",
		"lastTested": "2019-10-30 12:08:10",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.84",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 08:20:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git config --global credential.helper store",
		"category": "git",
		"extras": "",
		"front": "how to get git to remember your github credentials",
		"id": 1803,
		"importId": "howToGetGitToRememberYourGithubCredentials_gitConfigGlobalCredentialhelperStore",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-11-29 04:44:20",
		"lastTested": "2019-11-29 04:44:20",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 5,
		"pronunciation": "",
		"rank": "4.68",
		"status": "learned",
		"systemWhenCreated": "2019-11-27 10:42:30",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "const numberSelected = this.categories.filter(x => x.included).length;",
		"category": "javascript",
		"extras": "",
		"front": "count how many items in array have property of certain value",
		"id": 1817,
		"importId": "countHowManyItemsInArrayHavePropertyOfCertainValue_constNumberSelectedThiscategoriesfilterxXincludedlength",
		"kind": "code",
		"labels": "",
		"lastLearned": "2019-11-29 07:18:48",
		"lastTested": "2019-11-29 07:18:48",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.42",
		"status": "learned",
		"systemWhenCreated": "2019-11-28 21:12:49",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `this.categories.forEach((x) => { x.included = false; })`, but notice this only works for properties of objects, i.e. you can't change the objects themselves",
		"category": "javascript",
		"extras": "",
		"front": "change values of a property on each item in an array",
		"id": 1818,
		"importId": "changeValuesOfAPropertyOnEachItemInAnArray_thiscategoriesforEachxXincludedFalse",
		"kind": "code",
		"labels": "",
		"lastLearned": "2020-06-08 06:06:12",
		"lastTested": "2020-06-08 06:06:12",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "3.43",
		"status": "learned",
		"systemWhenCreated": "2019-11-28 21:21:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git commit -am \"changed header\"",
		"category": "git",
		"extras": "",
		"front": "how to add and commit",
		"id": 1822,
		"importId": "howToAddAndCommit_gitCommitAmChangedHeader",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2019-11-29 04:19:54",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.5",
		"status": "testing",
		"systemWhenCreated": "2019-11-28 17:28:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git push --dry-run",
		"category": "git",
		"extras": "",
		"front": "how to see if there is anything to push *(if nothing, then \"Everything up-to-date\")*",
		"id": 1826,
		"importId": "howToSeeIfThereIsAnythingToPush_gitPushDryRun",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 07:42:15",
		"lastTested": "2020-05-06 07:42:15",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 6,
		"pronunciation": "",
		"rank": "4.41",
		"status": "learned",
		"systemWhenCreated": "2019-11-29 04:19:14",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "cw (change word) or ciw (change inner word)",
		"category": "vi",
		"extras": "",
		"front": "how to change the word your cursor is on",
		"id": 1835,
		"importId": "howToChangeTheWordYourCursorIsOn_cwChangeWordOrCiwChangeInnerWord",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-04 10:32:05",
		"lastTested": "2020-05-04 10:32:05",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.82",
		"status": "learned",
		"systemWhenCreated": "2019-11-29 07:46:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "yy p",
		"category": "vi",
		"extras": "",
		"front": "how to duplicate line",
		"id": 1899,
		"importId": "howToDuplicateLine_yyP",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 05:55:38",
		"lastTested": "2020-05-06 05:55:38",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "3.9",
		"status": "learned",
		"systemWhenCreated": "2019-11-29 10:57:01",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --pretty=format:\"%h - %ci - %s - %an\"",
		"category": "git",
		"extras": "",
		"front": "how to list all commits as \"hash - date - title - author\"",
		"id": 1928,
		"importId": "howToListAllCommitsWithDateAndAuthor_gitLogPrettyformathCiSAn",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-07 20:50:49",
		"lastTested": "2020-05-07 20:50:49",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 7,
		"pronunciation": "",
		"rank": "4.5",
		"status": "learned",
		"systemWhenCreated": "2019-12-05 04:10:53",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` only categories: `select DISTINCT trim(category) from flashcards order by category`, with totals: `select category, count(*) as total from flashcards group by category order by total desc`",
		"category": "sqlite",
		"extras": "",
		"front": "show list of all used categories in order, then with totals",
		"id": 2649,
		"importId": "showListOfAllUsedCategoriesInOrder_selectDISTINCTTrimcategoryFromFlashcardsOrderByCategory",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 05:59:18",
		"lastTested": "2020-06-08 05:59:18",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 9,
		"pronunciation": "",
		"rank": "4.27",
		"status": "learned",
		"systemWhenCreated": "2020-04-27 14:17:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "select * from flashcards where category in ('linux', 'git', 'javascript')",
		"category": "sqlite",
		"extras": "",
		"front": "show all where category is one of three values",
		"id": 2650,
		"importId": "showAllWhereCategoryIsOneOfThreeValues_selectFromFlashcardsWhereCategoryInLinuxGitJavascript",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-04 09:00:21",
		"lastTested": "2020-05-04 09:00:21",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "3.95",
		"status": "learned",
		"systemWhenCreated": "2020-04-27 14:17:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git add -A",
		"category": "git",
		"extras": "",
		"front": "how to add all changes from working directory to index",
		"id": 2651,
		"importId": "howToAddAllChangesFromWorkingDirectoryToIndex_gitAddA",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 07:53:26",
		"lastTested": "2020-05-13 07:53:26",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.29",
		"status": "learned",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --online",
		"category": "git",
		"extras": "",
		"front": "list abbreviated log",
		"id": 2652,
		"importId": "listAbbreviatedLog_gitLogOnline",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 05:34:45",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.36",
		"status": "testing",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --oneline **then** git revert 068b100",
		"category": "git",
		"extras": "",
		"front": "how to undo a commit",
		"id": 2653,
		"importId": "howToUndoACommit_gitLogOnlineThenGitRevert68b1",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-04 09:09:19",
		"lastTested": "2020-05-04 09:09:19",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.64",
		"status": "learned",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm outdated",
		"category": "npm",
		"extras": "",
		"front": "how to find which packages need to be updated",
		"id": 2654,
		"importId": "howToFindWhichPackagesNeedToBeUpdated_npmOutdated",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 08:44:59",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.93",
		"status": "testing",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git push -u origin et/bugfix/clean-up-code-copy-box",
		"category": "git",
		"extras": "",
		"front": "how to push local branch to remote",
		"id": 2655,
		"importId": "howToPushLocalBranchToRemote_gitPushUOriginEtbugfixcleanUpCodeCopyBox",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 08:46:16",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.24",
		"status": "testing",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git config --global core.editor \"nano\" **(or \"vim\")**",
		"category": "git",
		"extras": "",
		"front": "how to change git editor for commits",
		"id": 2656,
		"importId": "howToChangeGitEditorForCommits_gitConfigGlobalCoreeditorNanoOrVim",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 08:46:45",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.19",
		"status": "testing",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log -1",
		"category": "git",
		"extras": "",
		"front": "only show the last commit",
		"id": 2657,
		"importId": "onlyShowTheLastCommit_gitLog1",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 08:47:01",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.43",
		"status": "testing",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git checkout -- index.html",
		"category": "git",
		"extras": "",
		"front": "how to discard changes to a file in working directory\t",
		"id": 2658,
		"importId": "howToDiscardChangesToAFileInWorkingDirectory_gitCheckoutIndexhtml",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 08:48:04",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.5",
		"status": "testing",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git rm --cached index.html\t\t\t\t\t\t\t\t\t\t\t\t\t",
		"category": "git",
		"extras": "",
		"front": "how to mark a file as deleted in the index ",
		"id": 2659,
		"importId": "howToGetAFileBackFromIndexToWorkingDirectory_gitRmCachedIndexhtml",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 08:53:09",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.38",
		"status": "testing",
		"systemWhenCreated": "2020-04-28 16:25:12",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git ls-files --others --exclude-standard",
		"category": "git",
		"extras": "",
		"front": "how to see all files in working directory that are not being tracked yet",
		"id": 2660,
		"importId": "howToSeeAllFilesInWorkingDirectoryThatAreNotBeingTrackedYet_gitLsFilesOthersExcludeStandard",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-06-08 05:20:20",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "1.88",
		"status": "testing",
		"systemWhenCreated": "2020-04-28 16:25:12",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "back-tick key",
		"category": "gimp",
		"extras": "",
		"front": "toggle between two zooms",
		"id": 2661,
		"importId": "toggleBetweenTwoZooms_backTickKey",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 11:10:56",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ctrl-shift-j",
		"category": "gimp",
		"extras": "",
		"front": "fit image in window",
		"id": 2662,
		"importId": "fitImageInWindow_ctrlShiftJ",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 11:14:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ctrl-shift-a",
		"category": "gimp",
		"extras": "",
		"front": "deselect selection",
		"id": 2663,
		"importId": "deselectSelection_ctrlShiftA",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 11:14:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "double-click in main window area",
		"category": "gimp",
		"extras": "",
		"front": "open file",
		"id": 2664,
		"importId": "openFile_doubleClickInMainWindowArea",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git remote add origin https://github.com/edwardtanguay/nodeExpress4.git && git push -u origin master",
		"category": "git",
		"extras": "",
		"front": "how to set the GitHub repository for a new local directory",
		"id": 2665,
		"importId": "howToSetTheGitHubRepositoryForANewLocalDirectory_gitRemoteAddOriginHttpsgithubcomedwardtanguaynodeExpress4gitGitPushUOriginMaster",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 06:54:18",
		"lastTested": "2020-05-06 06:54:18",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "5",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git checkout -- .",
		"category": "git",
		"extras": "",
		"front": "how to reset all tracked files in workspace back",
		"id": 2666,
		"importId": "howToResetAllTrackedFilesInWorkspaceBack_gitCheckout",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-07 20:49:29",
		"lastTested": "2020-05-07 20:49:29",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 5,
		"pronunciation": "",
		"rank": "4.9",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git clone -b 001-two-page-base-functionality https://github.com/edwardtanguay/eleventy4.git eleventy001",
		"category": "git",
		"extras": "",
		"front": "how to clone a branch of a GitHub repository",
		"id": 2667,
		"importId": "howToCloneABranchOfAGitHubRepository_gitCloneB1TwoPageBaseFunctionalityHttpsgithubcomedwardtanguayeleventy4gitEleventy1",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 08:23:26",
		"lastTested": "2020-05-06 08:23:26",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.71",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git diff --stat --cached origin/master",
		"category": "git",
		"extras": "",
		"front": "how to see what files I am about to push",
		"id": 2668,
		"importId": "howToSeeWhatFilesIAmAboutToPush_gitDiffStatCachedOriginmaster",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 03:57:47",
		"lastTested": "2020-05-13 03:57:47",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 8,
		"pronunciation": "",
		"rank": "5",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git merge origin/master",
		"category": "git ",
		"extras": "",
		"front": "how to get the latest changes from master into your branch",
		"id": 2669,
		"importId": "howToGetTheLatestChangesFromMasterIntoYourBranch_gitMergeOriginmaster",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "type ll",
		"category": "linux",
		"extras": "",
		"front": "how to find out what an alias is mapped to",
		"id": 2670,
		"importId": "howToFindOutWhatAnAliasIsMappedTo_typeLl",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "removed",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git clean -fd  >>> (f = force, d = directories)",
		"category": "git",
		"extras": "",
		"front": "how to remove untracked files and directories in working directory, e.g. a whole bunch of log files and test directories that you created but don't want to add to the repository",
		"id": 2671,
		"importId": "howToRemoveUntrackedFilesInWorkingDirectoryEgAWholeBunchOfLogFilesYouCreatedButDontWantToAddToTheRepository_gitCleanFd",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 10:59:39",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.04",
		"status": "testing",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "browser-sync start -s --directory --files=*/**",
		"category": "browsersync",
		"extras": "",
		"front": "how to browse through directory and start HTML websites on port",
		"id": 2672,
		"importId": "howToBrowseThroughDirectoryAndStartHTMLWebsitesOnPort_browserSyncStartSDirectoryFiles",
		"kind": "commands",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `npm i http-server -g` (global) then e.g. `http-server -p 3333` and `localhost:3333` will use `index.html`  as default",
		"category": "dev",
		"extras": "",
		"front": "how to install local http server",
		"id": 2673,
		"importId": "howToInstallLocalHttpServer_npmInstallHttpServerGThenEgHttpServerP3333",
		"kind": "tool",
		"labels": "",
		"lastLearned": "2020-06-03 05:33:06",
		"lastTested": "2020-06-03 05:33:06",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.92",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "chmod u+x doit (chmod u-x doit)",
		"category": "linux ",
		"extras": "",
		"front": "how to make command executable, and remove it",
		"id": 2674,
		"importId": "howToMakeCommandExecutableAndRemoveIt_chmodUxDoitChmodUXDoit",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git commit *todo.txt -m \"small changes to todo file\"",
		"category": "git",
		"extras": "",
		"front": "how to send just one changed file from working directory all the way to local repository",
		"id": 2676,
		"importId": "howToSendJustOneChangedFileFromWorkingDirectoryAllToLocalRepository_gitCommitTodotxtMSmallChangesToTodoFile",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 12:47:35",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.29",
		"status": "testing",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ODS Hot Keys",
		"category": "webdev",
		"extras": "",
		"front": "program that shows keys you are typing for tutorials and workshops",
		"id": 2677,
		"importId": "programThatShowsKeysYouAreTypingForTutorialsAndWorkshops_oDSHotKeys",
		"kind": "tool",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "p>lorem",
		"category": "emmet",
		"extras": "",
		"front": "how to produce filler text in a paragraph element",
		"id": 2678,
		"importId": "howToProduceFillerTextInAParagraphElement_plorem",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "injects css into head of the DOM",
		"category": "webpack",
		"extras": "",
		"front": "what does the style-loader do?",
		"id": 2679,
		"importId": "whatDoesTheStyleLoaderDo_injectsCssIntoHeadOfTheDOM",
		"kind": "info",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find systemItems -iname \"*ver*\"",
		"category": "linux",
		"extras": "",
		"front": "find all files in `systemItems` which have the text \"ver\" in them",
		"id": 2680,
		"importId": "findAllFilesInSystemItemsWhichHaveTheTextVerInThem_findSystemItemsInameVer",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 08:57:35",
		"lastTested": "2020-05-06 08:57:35",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.82",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:16:36",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `find . -empty` and for specific directory: `find ./dev -empty` (notice `./`)",
		"category": "linux",
		"extras": "",
		"front": "find all empty files in (1) *all recursive files* and (2) in *certain directory*",
		"id": 2681,
		"importId": "findAllEmptyFiles_findEmpty",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 05:47:33",
		"lastTested": "2020-06-08 05:47:33",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 9,
		"pronunciation": "",
		"rank": "4.3",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:27:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": " find . -iname \"*array*\"",
		"category": "linux",
		"extras": "",
		"front": "find all JavaScript files that have the word \"array\" in them",
		"id": 2682,
		"importId": "findAllJavaScriptFilesThatHaveTheWordArrayInThem_findGrepIArrayjs",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 05:56:51",
		"lastTested": "2020-05-13 05:56:51",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 6,
		"pronunciation": "",
		"rank": "4.69",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 19:19:43",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find . -name \"*\" -not -path \"./node_modules/*\" | grep -i \".*item.*\\.js$\" > text.txt\t",
		"category": "linux",
		"extras": "",
		"front": "create a file listing all JavaScript files that have the word \"item\" in the name EXCEPT in the `node_modules` directory",
		"id": 2683,
		"importId": "findAllJavaScriptFilesThatHaveTheWordItemInTheNameEXCEPTInTheNodemodulesDirectory_findNameNotPathNodemodulesGrepIItemjsTexttxt",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-07 20:48:54",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 5,
		"pronunciation": "",
		"rank": "4.91",
		"status": "removed",
		"systemWhenCreated": "2020-05-04 19:19:43",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find . -iname \"*parse*\" -not -path \"./node_modules/*\"",
		"category": "linux",
		"extras": "",
		"front": "find all files with \"parse\" in the name EXCEPT in the directory `node_modules`",
		"id": 2684,
		"importId": "findAllFilesWithParseInTheNameEXCEPTInTheDirectoryNodemodules_findInameParseNotPathNodemodules",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 07:17:37",
		"lastTested": "2020-05-06 07:17:37",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.85",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 19:19:43",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git remote -v` (-v is for verbose)",
		"category": "git",
		"extras": "",
		"front": "how to get the remote GitHub fetch/pull URL of a local repository",
		"id": 2685,
		"importId": "howToGetTheRemoteGitHubFetchURLOfALocalRepository_gitRemoteV",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-05 08:42:22",
		"lastTested": "2020-06-05 08:42:22",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 7,
		"pronunciation": "",
		"rank": "4.7",
		"status": "learned",
		"systemWhenCreated": "2020-05-05 07:46:35",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "r",
		"category": "gimp",
		"extras": "",
		"front": "rectangle tool",
		"id": 2686,
		"importId": "rectangleTool_r",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-05 07:46:35",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ctrl-shift-a",
		"category": "gimp",
		"extras": "",
		"front": "unselect everything",
		"id": 2687,
		"importId": "unselectEverything_ctrlShiftA",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-05 07:46:35",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm un babel-node",
		"category": "npm",
		"extras": "",
		"front": "how to uninstall an npm package, e.g. `babel-node`",
		"id": 2688,
		"importId": "howToUninstallAPackage_npmUnBabelNode",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 06:00:27",
		"lastTested": "2020-06-08 06:00:27",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 6,
		"pronunciation": "",
		"rank": "4.19",
		"status": "learned",
		"systemWhenCreated": "2020-05-05 07:46:35",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git checkout master && git merge et/feat/new-checkbox && git branch -d et/feat/new-checkbox",
		"category": "git",
		"extras": "",
		"front": "merge branch you are working on back into master",
		"id": 2689,
		"importId": "gitMergeEtfeatnewCheckbox_",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 05:47:03",
		"lastTested": "2020-06-08 05:47:03",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 6,
		"pronunciation": "",
		"rank": "4.79",
		"status": "learned",
		"systemWhenCreated": "2020-05-05 17:20:37",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git checkout -b et/feat/new-checkbox",
		"category": "git",
		"extras": "",
		"front": "make new branch",
		"id": 2690,
		"importId": "gitCheckoutBEtfeatnewCheckbox_",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-07 20:51:12",
		"lastTested": "2020-05-07 20:51:12",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.46",
		"status": "learned",
		"systemWhenCreated": "2020-05-05 17:20:37",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git branch -d et/bugfix/clean-up-code-copy-box",
		"category": "git",
		"extras": "",
		"front": "how to delete a local branch",
		"id": 2691,
		"importId": "gitBranchDEtbugfixcleanUpCodeCopyBox_",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 07:42:00",
		"lastTested": "2020-05-06 07:42:00",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.42",
		"status": "learned",
		"systemWhenCreated": "2020-05-05 17:20:37",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git branch -a",
		"category": "git",
		"extras": "",
		"front": "show all branches, local and remote",
		"id": 2692,
		"importId": "gitBranchA_",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 07:41:28",
		"lastTested": "2020-05-06 07:41:28",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.47",
		"status": "learned",
		"systemWhenCreated": "2020-05-05 17:20:37",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "browser-sync start -s -f \"**/*\"",
		"category": "browsersync",
		"extras": "",
		"front": "what is the basic command to start browser-sync",
		"id": 2693,
		"importId": "browserSyncStartServerFiles_",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 09:09:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "it means from the root of the project and avoids you having to write things like: import Component from '../../../../components/component'",
		"category": "node",
		"extras": "",
		"front": "what does the ampersand in `import Component from '@/components/component'` mean",
		"id": 2694,
		"importId": "whatDoesTheAmpersandInImportComponentFromComponentscomponentMean_itMeansFromTheRootOfTheProjectAndAvoidsYouHavingToWriteThingsLikeImportComponentFromComponentscomponent",
		"kind": "clarification",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 09:09:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "e",
		"category": "gimp",
		"extras": "",
		"front": "ellipse select tool",
		"id": 2695,
		"importId": "ellipseSelectTool_e",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 09:09:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "is used to import style rules from other style sheets",
		"category": "css",
		"extras": "",
		"front": "what does `@import 'custom.css';` mean",
		"id": 2696,
		"importId": "whatDoesImportCustomcssMean_isUsedToImportStyleRulesFromOtherStyleSheets",
		"kind": "explanation",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 09:09:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "any file with any extension in any subdirectory, including the current one",
		"category": "browsersync",
		"extras": "",
		"front": "what do the double asterisks in `--files \"/assets/**/*.*\"` mean",
		"id": 2697,
		"importId": "whatDoTheDoubleAsterisksInFilesAssetsMean_anyFileWithAnyExtensionInAnySubdirectoryIncludingTheCurrentOne",
		"kind": "syntax",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 11:49:29",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "browser-sync start --config bs-config.js",
		"category": "browsersync",
		"extras": "",
		"front": "how to start browser-sync with a config file after you run `browser-sync init`",
		"id": 2698,
		"importId": "howToStartBrowserSyncWithAConfigFileAfterYouRunBrowserSyncInit_browserSyncStartConfigBsConfigjs",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 11:49:29",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "browser-sync start --server --files \"**/*\" --index \"index.htm\"",
		"category": "browsersync",
		"extras": "",
		"front": "how to specific the main file as \"index.htm\"",
		"id": 2699,
		"importId": "howToSpecificTheMainFileAsIndexhtm_browserSyncStartServerFilesIndexIndexhtm",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 11:49:29",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git remote prune origin",
		"category": "git",
		"extras": "",
		"front": "delete a remote branch that still shows with `git branch -a` but doesn't actually exist",
		"id": 2700,
		"importId": "deleteARemoteBranchThatStillShowsWithGitBranchAButDoesntActuallyExist_gitRemotePruneOrigin",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-06 06:33:34",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.22",
		"status": "testing",
		"systemWhenCreated": "2020-05-06 11:49:29",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --oneline -1",
		"category": "git",
		"extras": "",
		"front": "get the name of the commit that is about to be pushed",
		"id": 2701,
		"importId": "getTheNameOfTheCommitThatIsAboutToBePushed_gitLogOneline1",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 06:00:12",
		"lastTested": "2020-05-13 06:00:12",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.53",
		"status": "learned",
		"systemWhenCreated": "2020-05-06 16:45:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find . -iname \"*.js\" -not -path \"./node_modules/*\"",
		"category": "git",
		"extras": "",
		"front": "find all JavaScript files in any directory except for `node_modules`",
		"id": 2702,
		"importId": "smallerCommandToFindAllJavaScriptFilesInAnyDirectoryExceptForNodemodules_findInameItemjsNotPathNodemodules",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-12 07:09:55",
		"lastTested": "2020-05-12 07:09:55",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.97",
		"status": "learned",
		"systemWhenCreated": "2020-05-06 16:45:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git clean -df && git checkout -- .",
		"category": "git",
		"extras": "",
		"front": "how to completely reset working directory, e.g. all new and tracked files",
		"id": 2703,
		"importId": "howToCompletelyResetWorkingDirectoryEgAllNewAndTrackedFiles_gitCleanDfGitCheckout",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 04:20:50",
		"lastTested": "2020-05-13 04:20:50",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.94",
		"status": "learned",
		"systemWhenCreated": "2020-05-06 16:45:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "dwwP",
		"category": "vi",
		"extras": "",
		"front": "swap words",
		"id": 2704,
		"importId": "swapWords_dwwP",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 07:47:35",
		"lastTested": "2020-05-13 07:47:35",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.36",
		"status": "learned",
		"systemWhenCreated": "2020-05-06 16:45:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "SHIFT-eye",
		"category": "gimp",
		"extras": "",
		"front": "how to hide all other layers but one",
		"id": 2705,
		"importId": "howToHideAllOtherLayersButOne_sHIFTEye",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-07 17:28:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "f",
		"category": "gimp",
		"extras": "",
		"front": "lasso tool",
		"id": 2706,
		"importId": "lassoTool_f",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-07 17:28:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm list -g --depth=0",
		"category": "npm",
		"extras": "",
		"front": "see which global packages are installed",
		"id": 2707,
		"importId": "seeWhichGlobalPackagesAreInstalled_npmListGDepth",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-12 05:59:57",
		"lastTested": "2020-05-12 05:59:57",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.99",
		"status": "learned",
		"systemWhenCreated": "2020-05-08 02:46:46",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "",
		"category": "keyboard",
		"extras": "",
		"front": "ALT-42",
		"id": 2708,
		"importId": "alt 42_",
		"kind": "ALT-number for asterisk",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Layer > New From Visible",
		"category": "gimp",
		"extras": "",
		"front": "merge all layers into new layer",
		"id": 2709,
		"importId": "mergeAllLayersIntoNewLayer_layerNewFromVisible",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ctrl-shift-n",
		"category": "gimp",
		"extras": "",
		"front": "create new layer",
		"id": 2710,
		"importId": "createNewLayer_ctrlShiftN",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "SHIFT-CTRL-P code: show release notes",
		"category": "vscode",
		"extras": "",
		"front": "how to see release notes again",
		"id": 2711,
		"importId": "howToSeeReleaseNotesAgain_sHIFTCTRLPCodeShowReleaseNotes",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm uninstall -g create-react-app",
		"category": "npm",
		"extras": "",
		"front": "how to uninstall a global package",
		"id": 2712,
		"importId": "howToUninstallAGlobalPackage_npmUninstallGCreateReactApp",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 05:57:06",
		"lastTested": "2020-05-13 05:57:06",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.68",
		"status": "learned",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ctrl-, scrollToSwitchTabs",
		"category": "vscode",
		"extras": "",
		"front": "how to enable mouse wheel to switch tabs",
		"id": 2713,
		"importId": "howToEnableMouseWheelToSwitchTabs_ctrlScrollToSwitchTabs",
		"kind": "feature",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "create-react-app my-app --scripts-version react-scripts@^2",
		"category": "react",
		"extras": "",
		"front": "how to install create-react-app with classes instead of functions",
		"id": 2714,
		"importId": "howToInstallCreateReactAppWithClassesInsteadOfFunctions_createReactAppMyAppScriptsVersionReactScripts2",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "edit > preferences > windows management > reset",
		"category": "gimp",
		"extras": "",
		"front": "if your menus disappear",
		"id": 2715,
		"importId": "ifYourMenusDisappear_editPreferencesWindowsManagementReset",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` for directories: `find . -type d -iname \"q*\" -not -path \"./node_modules/*\"`, and for files: `find . -type f -iname \"q*\" -not -path \"./node_modules/*\"`",
		"category": "linux",
		"extras": "",
		"front": "list *only files* or *only directories* that begin with \"q\" EXCEPT FOR those in `node_modules`",
		"id": 2716,
		"importId": "listAllFilesAndDirectoriesThatBeginWithR_lsDR",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-15 04:21:59",
		"lastTested": "2020-05-15 04:21:59",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 8,
		"pronunciation": "",
		"rank": "4.61",
		"status": "learned",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "select layer > layer > crop to content",
		"category": "gimp",
		"extras": "",
		"front": "reduce the layer size to the content of what you drew",
		"id": 2717,
		"importId": "reduceTheLayerSizeToTheContentOfWhatYouDrew_selectLayerLayerCropToContent",
		"kind": "howto",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "<ul class=\"nav nav-pills\">\n    <li class=\"nav-item\">\n      <a class=\"nav-link active\" href=\"#\">Active</a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link\" href=\"#\">Link</a>\n    </li>\n</ul>",
		"category": "bootstrap",
		"extras": "",
		"front": "thick buttons as menu buttons",
		"id": 2718,
		"importId": "responsibleMenu_ulClassnavNavPillsFlexColumnFlexMdRow",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-10 04:33:38",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.77",
		"status": "testing",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "select layer > layer > crop to content > ctrl-c > ctrl-shift-v > ctrl-e",
		"category": "gimp",
		"extras": "",
		"front": "save content of layer at image",
		"id": 2719,
		"importId": "saveContentOfLayerAtImage_selectLayerLayerCropToContentCtrlCCtrlShiftVCtrlE",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm cache clean --force",
		"category": "npm",
		"extras": "",
		"front": "what to do if you get the error \"Maximum call stack size exceeded on npm install\"",
		"id": 2720,
		"importId": "whatToDoIfYouGetTheErrorMaximumCallStackSizeExceededOnNpmInstall_npmCacheCleanForce",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-05 04:58:36",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 6,
		"pronunciation": "",
		"rank": "3.79",
		"status": "testing",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "select category, count(*) as total from flashcards group by category order by total desc",
		"category": "sqlite",
		"extras": "",
		"front": "how to get how many records in each category",
		"id": 2721,
		"importId": "howToGetHowManyRecordsInEachCategory_selectCategoryCountAsTotalFromFlashcardsGroupByCategoryOrderByTotalDesc",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-12 06:08:34",
		"lastTested": "2020-05-12 06:08:34",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.99",
		"status": "learned",
		"systemWhenCreated": "2020-05-10 19:02:18",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm update",
		"category": "npm",
		"extras": "",
		"front": "how to fix problems when e.g. sqlite3 can't be found ",
		"id": 2722,
		"importId": "npmUpdate_",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-19 04:07:04",
		"lastTested": "2020-05-19 04:07:04",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.14",
		"status": "learned",
		"systemWhenCreated": "2020-05-11 05:17:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "user-select: none;",
		"category": "css",
		"extras": "",
		"front": "how to make it so that the user can't select text",
		"id": 2723,
		"importId": "howToMakeItSoThatTheUserCantSelectText_userSelectNone",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-12 11:59:07",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --oneline -1 && git diff --stat --cached origin/master",
		"category": "git",
		"extras": "",
		"front": "how to see the name of commit and its files that are about to be pushed",
		"id": 2724,
		"importId": "howToSeeTheNameOfCommitAndItsFilesThatAreAboutToBePushed_gitLogOneline1GitDiffStatCachedOriginmaster",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-12 07:09:17",
		"lastTested": "2020-05-12 07:09:17",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "5",
		"status": "learned",
		"systemWhenCreated": "2020-05-12 11:59:07",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find . -iname \"*item*.js\" ! -path \"./node_modules/*\" > itemFiles.txt",
		"category": "linux",
		"extras": "",
		"front": "create file listing all files with \"item\" in the name, but not in node_modules",
		"id": 2725,
		"importId": "createFileListingAllFilesWithItemInTheNameButNotInNodemodules_findInameItemjsNotPathNodemodulesItemFilestxt",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-20 09:32:33",
		"lastTested": "2020-05-20 09:32:33",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.91",
		"status": "learned",
		"systemWhenCreated": "2020-05-13 11:02:17",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git reset HEAD testItemFiles.txt",
		"category": "git",
		"extras": "",
		"front": "how to pull the file `testItemFiles.txt` back from staged to workspace",
		"id": 2726,
		"importId": "howToPullOneFileBackFromStagedToUnstaged_gitResetHEADTestItemFilestxt",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-18 10:21:19",
		"lastTested": "2020-05-18 10:21:19",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.43",
		"status": "learned",
		"systemWhenCreated": "2020-05-13 15:44:15",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git status",
		"category": "git",
		"extras": "",
		"front": "how to see what files are staged",
		"id": 2727,
		"importId": "howToSeeWhatFileAreStaged_gitStatus",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-15 04:22:25",
		"lastTested": "2020-05-15 04:22:25",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.47",
		"status": "learned",
		"systemWhenCreated": "2020-05-13 15:44:15",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `pkill -x node` (-x means to match name exactly)",
		"category": "linux",
		"extras": "",
		"front": "how to stop process",
		"id": 2728,
		"importId": "howToStopProcess_pkillXNodeXMeansToMatchNameExactly",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-18 04:36:40",
		"lastTested": "2020-05-18 04:36:40",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.53",
		"status": "learned",
		"systemWhenCreated": "2020-05-14 06:13:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git diff origin/master` (it will also show local changed, i.e. the difference between local workspace and github apparently)",
		"category": "git",
		"extras": "",
		"front": "see what changes will be coming on next pull",
		"id": 2729,
		"importId": "seeWhatChangesWillBeComingOnNextPull_gitDiffOriginmaster",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:06:04",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 8,
		"pronunciation": "",
		"rank": "4.3",
		"status": "testing",
		"systemWhenCreated": "2020-05-14 06:13:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find . -type d ! -path \"./node_modules/*\" ! -path \"./.git/*\"",
		"category": "linux",
		"extras": "",
		"front": "find all directories except for those in `node_modules` and `.git`",
		"id": 2730,
		"importId": "findAllDirectoriesExceptForThoseInNodemodulesAndGit_findTypeDPathNodemodulesPathGit",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-18 04:13:30",
		"lastTested": "2020-05-18 04:13:30",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.71",
		"status": "learned",
		"systemWhenCreated": "2020-05-14 10:28:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "```\t`grid-template-columns: 100px 1fr 1fr;` AND `grid-template-rows: 200px;`",
		"category": "css",
		"extras": "",
		"front": "grid with three boxes, 100px then half/half of rest, and the row 200px high",
		"id": 2731,
		"importId": "gridWithThreeBoxes1pxThenHalfhalfOfRestAndTheRow2pxHigh_gridTemplateColumns1px1fr1frANDGridTemplateRows2px",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-14 23:17:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "grid-template-columns: 100px minmax(100px, 1fr) 3fr;",
		"category": "css",
		"extras": "",
		"front": "grid with three boxes, 100px then 1:3 but second column may not be smaller than 100px",
		"id": 2732,
		"importId": "gridWithThreeBoxes1pxThen13ButSecondColumnMayNotBeSmallerThan1px_gridTemplateColumns1pxMinmax1px1fr3fr",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-14 23:17:25",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git clone [URL] mytest`, go to directory, `git reset --hard [HASH]`",
		"category": "git",
		"extras": "",
		"front": "how to clone a respository at a certain commit",
		"id": 2733,
		"importId": "howToCloneARespositoryAtACertainCommit_gitCloneURLMytestTHENGitResetHardHASH",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 06:01:20",
		"lastTested": "2020-06-08 06:01:20",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.02",
		"status": "learned",
		"systemWhenCreated": "2020-05-15 00:20:47",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "shift-click a link checkbox",
		"category": "gimp",
		"extras": "",
		"front": "link all layers",
		"id": 2734,
		"importId": "linkAllLayers_shiftClickALinkCheckbox",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-15 00:38:32",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "shift-s",
		"category": "gimp",
		"extras": "",
		"front": "scale tool",
		"id": 2735,
		"importId": "scaleTool_shiftS",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-15 00:38:32",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npx create-react-app reactfull --use-npm",
		"category": "react",
		"extras": "",
		"front": "create react app with npm",
		"id": 2736,
		"importId": "createReactAppWithNpm_npxCreateReactAppReactfullUseNpm",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-15 08:00:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "display: grid; grid-gap: 10px; padding: 10px; grid-row-gap, grid-column-gap",
		"category": "css",
		"extras": "",
		"front": "base formating for a grid",
		"id": 2737,
		"importId": "baseFormatingForAGrid_displayGridGridGap1pxPadding1pxGridRowGapGridColumnGap",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-15 19:49:49",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "<ul class=\"navbar-nav ml-auto\">",
		"category": "bootstrap",
		"extras": "",
		"front": "move menu items in navbar to the right",
		"id": 2739,
		"importId": "moveMenuItemsInNavbarToTheRight_ulClassnavbarNavMlAuto",
		"kind": "class",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:40:56",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "4.18",
		"status": "testing",
		"systemWhenCreated": "2020-05-16 12:48:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "%s/n49/n29/g",
		"category": "vi",
		"extras": "",
		"front": "search and replace in whole file",
		"id": 2740,
		"importId": "searchAndReplaceInWholeFile_sn49n29g",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-18 04:36:26",
		"lastTested": "2020-05-18 04:36:26",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "5",
		"status": "learned",
		"systemWhenCreated": "2020-05-16 14:44:14",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "select-by-color tool (shift-o), click, colors, hue-saturation, lightness",
		"category": "gimp",
		"extras": "",
		"front": "make specific color darker",
		"id": 2741,
		"importId": "makeSpecificColorDarker_selectByColorToolShiftOClickColorsHueSaturationLightness",
		"kind": "task",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-16 16:36:58",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "i",
		"category": "gimp",
		"extras": "",
		"front": "scissor select",
		"id": 2742,
		"importId": "scissorSelect_i",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-16 16:36:59",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Bracket Pair Colorizer 2",
		"category": "vscode",
		"extras": "",
		"front": "how to more easily identify which brackets are matched in code",
		"id": 2743,
		"importId": "howToMoreEasilyIdentifyWhichBracketsAreMatchedInCode_bracketPairColorizer2",
		"kind": "extension",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-16 22:24:44",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "settings > \"html attribute\" > forced-aligned",
		"category": "vscode",
		"extras": "",
		"front": "how to align attributes under each other",
		"id": 2744,
		"importId": "howToAlignAttributesUnderEachOther_settingsHtmlAttributeForcedAligned",
		"kind": "setting",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-16 22:24:44",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npx babel-node src/server.js",
		"category": "node",
		"extras": "",
		"front": "how to start express site with babel",
		"id": 2745,
		"importId": "howToStartExpressSiteWithBabel_npxBabelNodeSrcserverjs",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-18 00:03:20",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git reset -- */qstr.js` (note that `checkout ` doesn't always work)",
		"category": "git",
		"extras": "",
		"front": "how to undo changes in `qstr.js` file that is now in the workspace",
		"id": 2746,
		"importId": "howToUndoChangesInQstrjsFileThatIsNowInTheWorkspace_gitCheckoutQstrjs",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-18 08:57:07",
		"lastTested": "2020-05-18 08:57:07",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "5.0",
		"status": "learned",
		"systemWhenCreated": "2020-05-18 10:35:50",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git clean -f test444.txt",
		"category": "git",
		"extras": "",
		"front": "remove the file `test444.txt` that you created in the workspace (e.g. you could also just `rm` it)",
		"id": 2747,
		"importId": "removeAFileThatYouCreatedInTheWorkspaceYouCouldAlsoJustRmIt_gitCleanFTest444txt",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-18 08:42:33",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.37",
		"status": "testing",
		"systemWhenCreated": "2020-05-18 11:00:17",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git stash --include-untracked ",
		"category": "git",
		"extras": "",
		"front": "quick store away (no name) all files in workspace and staging area, both newly created or already in Git",
		"id": 2748,
		"importId": "quickStoreAwayAllFilesInWorkspaceAndStagingAreaBothNewlyCreatedOrAlreadyInGit_gitStashIncludeUntracked",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 04:34:23",
		"lastTested": "2020-06-08 04:34:23",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "3.8",
		"status": "learned",
		"systemWhenCreated": "2020-05-18 16:18:10",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git stash push --include-untracked -m \"upload_change_half_done\"` (`git stash save ...` is deprecated), `git stash list`, `git show stash@{1}`, `git show stash@{1}^2`, `git show stash@{1}^3`, `git pop stash@{1}`, `git drop stash@{2}`",
		"category": "git",
		"extras": "",
		"front": "temporarily store all changes out of the way to `upload_change_half_done`, list, see files, and restore",
		"id": 2749,
		"importId": "temporarilyStoreAllChangesOutOfTheWayToUploadchangehalfdoneListSeeFilesAndRestore_gitStashPushIncludeUntrackedMUploadchangehalfdoneGitStashSaveIsDeprecatedGitStashListGitShowStash1GitShowStash12GitShowStash13GitPopStash1",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-07-29 03:46:23",
		"lastTested": "2020-07-29 03:46:23",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 16,
		"pronunciation": "",
		"rank": "5",
		"status": "learned",
		"systemWhenCreated": "2020-05-18 16:18:10",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Miranda and Haskell",
		"category": "general",
		"extras": "",
		"front": "two functional languages from 80s and 90s",
		"id": 2750,
		"importId": "twoFunctionalLanguagesFrom8sAnd9s_mirandaAndHaskell",
		"kind": "fact",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-18 17:26:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "const { name, text } = req.body;",
		"category": "javascript ",
		"extras": "",
		"front": "define the two variables \"name\" and \"text\" from body \"req.body\"",
		"id": 2751,
		"importId": "defineTheTwoVariablesNameAndTextFromBodyReqbody_constNameTextReqbody",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-18 20:27:23",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `find . ! -path \"./node_modules/*\" ! -path \"./.git/*\" | grep -P \"\\.e?js$\" > files.txt` (`-P` means to interpret as Perl regular expression, egrep gets an error)",
		"category": "linux",
		"extras": "",
		"front": "create file of all `.js` and `.ejs` files recursively except in `node_modules` and `.git`",
		"id": 2752,
		"importId": "createFileOfAllJsAndEjsFilesRecursivelyExceptInNodemodules_findPathNodemodulesGrepPEjsFiletxtPMeansToInterpretAsPerlRegularExpression",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-29 04:43:08",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "3.7",
		"status": "testing",
		"systemWhenCreated": "2020-05-19 10:26:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `cat > test.txt` and CTRL-C to save",
		"category": "linux",
		"extras": "",
		"front": "how to create a quick multi-line file called `text.txt`",
		"id": 2753,
		"importId": "howToCreateAQuickMultiLineFileCalledTexttxt_catTesttxtAndCTRLCToSave",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-05 08:43:08",
		"lastTested": "2020-06-05 08:43:08",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.44",
		"status": "learned",
		"systemWhenCreated": "2020-05-20 23:15:18",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --pretty=format:\"%h %ci %s\" --before=\"2020-02-01\"",
		"category": "git",
		"extras": "",
		"front": "get list of commits at the end of January",
		"id": 2754,
		"importId": "getListOfCommitsAtTheEndOfJanuary_gitLogPrettyformathCiSBefore2221",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-06-03 03:09:05",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.37",
		"status": "testing",
		"systemWhenCreated": "2020-05-20 23:15:18",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` python, instagram, bitbucket",
		"category": "dev",
		"extras": "",
		"front": "what language is django written in and what are two large projects",
		"id": 2755,
		"importId": "whatLanguageIsDjangoWrittenInAndWhatAreTwoLargeProjects_pythonInstagramBitbucket",
		"kind": "term",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-06-03 03:09:31",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.85",
		"status": "testing",
		"systemWhenCreated": "2020-05-20 23:15:18",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Tkinter (standard) and PyQt (more professional)",
		"category": "dev",
		"extras": "",
		"front": "two Python GUI toolkits",
		"id": 2756,
		"importId": "twoPythonGUIToolkits_tkinterStandardAndPyQtMoreProfessional",
		"kind": "tools",
		"labels": "",
		"lastLearned": "2020-06-08 06:01:46",
		"lastTested": "2020-06-08 06:01:46",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "3.98",
		"status": "learned",
		"systemWhenCreated": "2020-05-20 23:55:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` Pygame, 2000",
		"category": "python",
		"extras": "",
		"front": "cross-platform set of Python modules designed for writing video games, and when created",
		"id": 2757,
		"importId": "crossPlatformSetOfPythonModulesDesignedForWritingVideoGamesAndWhenCreated_pygame2",
		"kind": "history",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-21 13:08:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` **MATLAB** (1984, payware, training from 2018) which influenced: **Octave** (1988, free) and **Scilab** (1990, free, French)",
		"category": "python",
		"extras": "",
		"front": "three languages that python aimed to replace",
		"id": 2758,
		"importId": "threeLanguagesThatPythonAimedToReplace_mATLAB1984PaywareTrainingFrom218WhichInfluencedOctave1988FreeAndScilab199FreeFrench",
		"kind": "history",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-21 13:08:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "https://pypi.org",
		"category": "python",
		"extras": "",
		"front": "package index website",
		"id": 2759,
		"importId": "packageIndexWebsite_httpspypiorg",
		"kind": "term",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-21 13:08:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git show 3fbb5d4",
		"category": "git ",
		"extras": "",
		"front": "how to get detailed information on a commit in the past, e.g. after you show all commits at the end of January",
		"id": 2760,
		"importId": "howToGetDetailedInformationOnACommitInThePastEgAfterYouShowAllCommitsAtTheEndOfJanuary_gitShow3fbb5d4",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-22 10:49:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "hold down ALT, click on each place, and type",
		"category": "vscode",
		"extras": "",
		"front": "how to type the same code in two places at once",
		"id": 2761,
		"importId": "howToTypeTheSameCodeInTwoPlacesAtOnce_holdDownALTClickOnEachPlaceAndType",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-26 22:40:56",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "GraphQL",
		"category": "react",
		"extras": "",
		"front": "what can replace the need for Redux entirely",
		"id": 2762,
		"importId": "whatCanReplaceTheNeedForReduxEntirely_graphQL",
		"kind": "fact",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-06-05 07:23:56",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Heroku (Salesforce), Chief Architect Ruby",
		"category": "people",
		"extras": "",
		"front": "what company does Yukihiro \"Matz\" Matsumoto work for",
		"id": 2763,
		"importId": "whatCompanyDoesYukihiroMatzMatsumotoWorkFor_herokuSalesforceChiefArchitectRuby",
		"kind": "fact",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-06-05 21:45:15",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ul>lorem20*10",
		"category": "emmet",
		"extras": "",
		"front": "a ul with 10 li elements that have a lorem ipsum of 20 words each",
		"id": 2764,
		"importId": "aUlWith1LiElementsThatHaveALoremIpsumOf2WordsEach_ullorem21",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-06-06 00:11:20",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "numbers.slice()",
		"category": "javascript",
		"extras": "",
		"front": "how to get a copy of an array e.g. numbers",
		"id": 2765,
		"importId": "howToGetACopyOfAnArrayEgNumbers_numbersslice",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-06-23 06:02:43",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.02",
		"status": "testing",
		"systemWhenCreated": "2020-06-12 17:36:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "numbers.sort( (a,b) => a - b);",
		"category": "javascript",
		"extras": "",
		"front": "how to sort integers",
		"id": 2766,
		"importId": "howToSortIntegers_numberssortAbAB",
		"kind": "code",
		"labels": "",
		"lastLearned": "2020-07-01 06:17:51",
		"lastTested": "2020-07-01 06:17:51",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.41",
		"status": "learned",
		"systemWhenCreated": "2020-06-15 17:46:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "const newNumbers = numbers.slice().sort( (a,b) => a - b);",
		"category": "javascript",
		"extras": "",
		"front": "how to sort array of numbers non-mutating to new array",
		"id": 2767,
		"importId": "howToSortArrayOfNumbersNonMutatingToNewArray_constNewNumbersNumbersslicesortAbAB",
		"kind": "code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-06-23 06:51:33",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.22",
		"status": "testing",
		"systemWhenCreated": "2020-06-15 18:03:02",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ul>li*10>lorem",
		"category": "emmet",
		"extras": "",
		"front": "ul with 10 li elements with sample text\t",
		"id": 2768,
		"importId": "ulWith1LiElementsWithSampleText_ulli1lorem",
		"kind": "code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-06-16 05:19:21",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Scala, Elm, ClojureScript, PureScript, ReasonML",
		"category": "javascript",
		"extras": "",
		"front": "five languages that compile to JavaScript",
		"id": 2769,
		"importId": "fourLanguagesThatCompileToJavaScript_scalaElmClojureScriptPureScript",
		"kind": "fact",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-06-26 03:48:45",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3",
		"status": "testing",
		"systemWhenCreated": "2020-06-23 12:00:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "return Number(String(x).split('').reverse().join(''));",
		"category": "JavaScript",
		"extras": "",
		"front": "how to reverse the digits in a number?",
		"id": 2770,
		"importId": "howToReverseTheDigitsInANumber_returnNumberStringxsplitreversejoin",
		"kind": "skill",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-06-23 15:52:25",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "String(\"00000\" + count).slice(-5);",
		"category": "javascript",
		"extras": "",
		"front": "how to pad a number with zeros as a string",
		"id": 2771,
		"importId": "howToPadANumberWithZerosAsAString_stringCountslice5",
		"kind": "skill",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-29 06:47:09",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "3.6",
		"status": "testing",
		"systemWhenCreated": "2020-06-25 15:10:49",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `const item = items[Math.floor(Math.random() * items.length)];` (note: add +1 for e.g. 1-10 random number)",
		"category": "javascript",
		"extras": "",
		"front": "get random item in array",
		"id": 2772,
		"importId": "getRandomItemInArray_constItemItemsMathfloorMathrandomItemslength",
		"kind": "skill",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:06:10",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 5,
		"pronunciation": "",
		"rank": "4.23",
		"status": "testing",
		"systemWhenCreated": "2020-06-25 15:57:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` short form: `ls -d */` (slash necessary), long form: `ls -l | egrep ^d`",
		"category": "linux",
		"extras": "",
		"front": "how to list only directories, short and long form",
		"id": 2774,
		"importId": "howToListOnlyDirectoriesShortAndLongForm_shortFormLsDLongForm",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-10 04:00:47",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 7,
		"pronunciation": "",
		"rank": "4.83",
		"status": "testing",
		"systemWhenCreated": "2020-06-30 17:28:36",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `ls -l | egrep -v '^d'` (-v = inverse match)",
		"category": "linux",
		"extras": "",
		"front": "how to list only files",
		"id": 2775,
		"importId": "howToListOnlyFiles_lsLEgrepVDVInverseMatch",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-07-29 04:23:44",
		"lastTested": "2020-07-29 04:23:44",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.66",
		"status": "learned",
		"systemWhenCreated": "2020-07-03 11:49:48",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "select it, [[CTRL-F2]]",
		"category": "vscode",
		"extras": "",
		"front": "how to change the name of numerous instances of a variable",
		"id": 2776,
		"importId": "howToChangeTheNameOfNumerousInstancesOfAVariable_selectItCTRLF2",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-03 14:45:13",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm config get prefix",
		"category": "npm",
		"extras": "",
		"front": "how to find out the path for all global npm commands, e.g. to add to environment variables",
		"id": 2778,
		"importId": "howToFindOutThePathForAllGlobalNpmCommandsEgToAddToEnvironmentVariables_npmConfigGetPrefix",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-05 04:59:02",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "3.79",
		"status": "testing",
		"systemWhenCreated": "2020-07-20 10:52:14",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git diff master..et/enh/include-flashcards-in-home",
		"category": "git",
		"extras": "",
		"front": "How to get change differences between master and work branch",
		"id": 2779,
		"importId": "howToGetChangeDifferencesBetweenMasterAndWorkBranch_gitLogOnelineMasteretenhincludeFlashcardsInHome",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-27 04:11:21",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.58",
		"status": "testing",
		"systemWhenCreated": "2020-07-22 15:35:49",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CTRL-SHIFT-P",
		"category": "atom",
		"extras": "",
		"front": "get search list of all commands",
		"id": 2780,
		"importId": "getSearchListOfAllCommands_ctrl shift p",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 15:35:49",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git branch",
		"category": "git",
		"extras": "",
		"front": "list local branches",
		"id": 2781,
		"importId": "listLocalBranches_gitBranch",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-27 04:52:27",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.47",
		"status": "testing",
		"systemWhenCreated": "2020-07-22 15:54:22",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CTRL-B",
		"category": "Atom",
		"extras": "",
		"front": "search open files with keyword",
		"id": 2782,
		"importId": "searchOpenFilesWithKeyword_ctrl b",
		"kind": "Shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 16:56:25",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CTRL-T",
		"category": "Atom",
		"extras": "",
		"front": "find any file in the project fast",
		"id": 2783,
		"importId": "findAnyFileInTheProjectFast_ctrl t",
		"kind": "Shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 16:56:25",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `CTRL-K, right-arrow` then `CTRL-K, down-arrow`  or simply drag panes around ",
		"category": "Atom",
		"extras": "",
		"front": "open up second and third pane for same file",
		"id": 2784,
		"importId": "openUpSecondAndThirdPaneForSameFile_cTRLKRightArrowThenCTRLKDownArrowOrSimplyDragPanesAround",
		"kind": "Shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 16:56:25",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CTRL-R",
		"category": "Atom",
		"extras": "",
		"front": "go quickly to methods in JavaScript file",
		"id": 2785,
		"importId": "goQuicklyToMethodsInJavaScriptFile_ctrl r",
		"kind": "Shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 17:20:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` set: `CTRL-ALT-F2`, goto: `CTRL-F2`",
		"category": "Atom",
		"extras": "",
		"front": "set and go to bookmarks",
		"id": 2786,
		"importId": "setAndGoToBookmarks_setCTRLALTF2GotoCTRLF2",
		"kind": "Shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 17:20:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "https://unsplash.com",
		"category": "webdesign",
		"extras": "",
		"front": "where to get free photos",
		"id": 2787,
		"importId": "whereToGetFreePhotos_httpsunsplashcom",
		"kind": "Online Tool",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 19:05:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ALT-select each one, then change",
		"category": "vscode",
		"extras": "",
		"front": "change multiple areas of text at a time",
		"id": 2788,
		"importId": "changeMultipleAreasOfTextAtATime_aLTSelectEachOneThenChange",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-28 20:34:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "require('crypto').randomBytes(5).toString('hex');",
		"category": "javascript",
		"extras": "",
		"front": "how to produce a 10-digit random idCode, e.g. with letters (a-f) and numbers",
		"id": 2789,
		"importId": "howToProduceARandomIdCode_requirecryptorandomBytes1toStringhex",
		"kind": "code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-29 04:23:22",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.5",
		"status": "testing",
		"systemWhenCreated": "2020-07-28 21:17:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find . ! -path \"./node_modules/*\" ! -path \"./.git/*\" | grep -P \"\\.html?$\"",
		"category": "linux",
		"extras": "",
		"front": "how to list all `.htm` and `.html` files except in the directorys `node_modules` and `.git` to a file",
		"id": 2790,
		"importId": "howToListAllHtmAndHtmlFilesExceptInTheDirectorysNodemodulesAndGitToAFile_findPathNodemodulesPathGitGrepPHtml",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:05:45",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.42",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 10:49:42",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git show HEAD",
		"category": "git",
		"extras": "",
		"front": "how to see changes in files that you just committed locally",
		"id": 2791,
		"importId": "howToSeeChangesInFilesThatYouHaveCommittedLocally_gitShowHEAD",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:04:56",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.58",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 15:13:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git help ls-tree",
		"category": "git",
		"extras": "",
		"front": "how to get help on e.g. ls-tree",
		"id": 2792,
		"importId": "howToGetHelpOnEgLsTree_gitHelpLsTree",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-31 03:56:28",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.94",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --graph --decorate -30 --all --date-order --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset %C(black bold)%ad%Creset%C(auto)%d %s'",
		"category": "git",
		"extras": "",
		"front": "show extensive text-graphic display of log",
		"id": 2793,
		"importId": "showExtensiveTextGraphicDisplayOfLog_gitLogGraphDecorate3AllDateOrderDateformatYMDHMSPrettyformatCcyanhCresetCblackBoldadCresetCautodS",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "parked",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "\"log\": \"git log --pretty=format:\\\"%h - %ad - %s\\\" -10 --date=format:\\\"%Y-%m-%d %H:%M:%S\\\"\"",
		"category": "git",
		"extras": "",
		"front": "npm script for: list last 10 commit with dates ",
		"id": 2794,
		"importId": "npmScriptForSimpleGitLog_logGitLogPrettyformathCiS1",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-31 09:29:36",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.79",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --graph",
		"category": "git",
		"extras": "",
		"front": "how to show log as text graph but with infos",
		"id": 2795,
		"importId": "howToShowLogAsTextGraphButWithInfos_gitLogGraph",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-31 09:53:15",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.16",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git log -p` (p = patch)",
		"category": "git",
		"extras": "",
		"front": "show all changes from past commits",
		"id": 2796,
		"importId": "showAllChangesFromPastCommites_gitLogPPPatch",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-08-04 05:06:55",
		"lastTested": "2020-08-04 05:06:55",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "5.0",
		"status": "learned",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --graph --all --oneline --decorate",
		"category": "git",
		"extras": "",
		"front": "simple command to get text graph of branches in log",
		"id": 2797,
		"importId": "simpleCommandToGetTextGraphOfBranchesInLog_gitLogGraphAllOnelineDecorate",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-05 04:58:20",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "3.88",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log -3",
		"category": "git",
		"extras": "",
		"front": "list the last three commits",
		"id": 2798,
		"importId": "listTheLastThreeCommits_gitLog3",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-08-05 04:58:25",
		"lastTested": "2020-08-05 04:58:25",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "3.86",
		"status": "learned",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git ls-tree HEAD^ system/` (don't forget the / at the end)",
		"category": "git",
		"extras": "",
		"front": "how to see the contents of the directory `system` in the commit before the last one",
		"id": 2799,
		"importId": "howToSeeTheContentsOfTheDirectorySystemInTheCommitBeforeTheLastOne_gitLsTreeHEADSystem",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:04:49",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.76",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` go to empty directory create react app in directory: `npx create-react-app .` then `npm start`",
		"category": "react",
		"extras": "",
		"front": "how to create and run a react app in a directory",
		"id": 2800,
		"importId": "howToCreateAndRunAReactAppInADirectory_goToEmptyDirectoryCreateReactAppInDirectoryNpxCreateReactAppThenNpmStart",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-30 09:15:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm -g outdated",
		"category": "npm",
		"extras": "",
		"front": "how to see what global installs need to be updated",
		"id": 2801,
		"importId": "howToSeeWhatGlobalInstallsNeedToBeUpdated_npmGOutdated",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-03 03:59:05",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.56",
		"status": "testing",
		"systemWhenCreated": "2020-07-30 09:15:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ls -d */s*",
		"category": "linux",
		"extras": "",
		"front": "how to list all directories at any level that start with \"s\"",
		"id": 2802,
		"importId": "howToListAllDirectoriesThatStartWithG_lsDG",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-03 04:34:27",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.56",
		"status": "testing",
		"systemWhenCreated": "2020-07-31 07:00:08",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git clean -f test444.txt",
		"category": "git",
		"extras": "",
		"front": "what is the git version of deleting a file (e.g. `rm test444.txt`) that you added to the workspace",
		"id": 2803,
		"importId": "removeAFileThatYouCreatedInTheWorkspaceYouCouldAlsoJustRmIt_gitCleanFTest444txt",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-18 08:42:33",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.37",
		"status": "testing",
		"systemWhenCreated": "2020-07-31 13:22:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "history | grep all$",
		"category": "linux",
		"extras": "",
		"front": "find previous command you used that ends with `all`",
		"id": 2804,
		"importId": "findPreviousCommandYouUsedThatEndsWithAll_historyGrepAll",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-08-05 04:29:34",
		"lastTested": "2020-08-05 04:29:34",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.46",
		"status": "learned",
		"systemWhenCreated": "2020-07-31 14:00:11",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git add . && git commit -m \"second commit\"",
		"category": "gif",
		"extras": "",
		"front": "how to add and commit all tracked and untracked files",
		"id": 2805,
		"importId": "howToAddAndCommitAllTrackedAndUntrackedFiles_gitAddGitCommitMSecondCommit",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-31 15:57:20",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git diff master..et-test-change-one-thing --color-words",
		"category": "git",
		"extras": "",
		"front": "how to list changes between branches and show changes on one line (easy to read)",
		"id": 2806,
		"importId": "howToListChangesBetweenBranchesAndShowChangesOnOneLineEasyToRead_gitDiffMasteretTestChangeOneThingColorWords",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:05:03",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.49",
		"status": "testing",
		"systemWhenCreated": "2020-07-31 17:04:54",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` go to branch, then: `git branch -m et-test-new-name` (note: only rename branches before you start sharing them with other people), `-m` for move",
		"category": "git",
		"extras": "",
		"front": "how to change name of branch",
		"id": 2807,
		"importId": "howToChangeNameOfBranch_goToBranchThenGitBranchMEtTestNewNameNoteOnlyRenameBranchesBeforeYouStartSharingThemWithOtherPeople",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-03 09:20:53",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.49",
		"status": "testing",
		"systemWhenCreated": "2020-07-31 17:04:54",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "grep for */qstr.js -n",
		"category": "linux",
		"extras": "",
		"front": "find all lines that have \"for\" in them in a file called `qstr.js` which is somewhere in any directory, with line numbers",
		"id": 2808,
		"importId": "findAllLinesThatHaveForInThemInAFileCalledQstrjsWhichIsSomewhereInAnyDirectoryWithLineNumbers_grepForQstrjsN",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-03 09:21:24",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.74",
		"status": "testing",
		"systemWhenCreated": "2020-08-03 14:22:44",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "grep for */qstr.js -c",
		"category": "linux",
		"extras": "",
		"front": "count how many times \"for\" occurs in a file called `qstr.js` that is somewhere in a directory",
		"id": 2810,
		"importId": "countHowManyTimeForOccursInAFileCalledQstrjsThatIsSomewhereInADirectory_grepForQstrjsC",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:05:55",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.41",
		"status": "testing",
		"systemWhenCreated": "2020-08-03 14:22:44",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "grep -ri \\bname\\b qtools",
		"category": "linux ",
		"extras": "",
		"front": "search in all files in the directory `qtools` for the whole word `name` or `Name` (but not e.g. `firstName` or `names`)",
		"id": 2812,
		"importId": "searchInAllFilesInTheDirectoryQtoolsForTheWholeWordNameOrNameButNotEgFirstNameOrNames_grepRiBnamebQtools",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-03 14:40:10",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git reset --hard nnnnnn",
		"category": "git",
		"extras": "",
		"front": "how to restore to a certain commit",
		"id": 2813,
		"importId": "howToRestoreToACertainCommit_gitResetHardNnnnnn",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-08-05 04:28:51",
		"lastTested": "2020-08-05 04:28:51",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.55",
		"status": "learned",
		"systemWhenCreated": "2020-08-03 16:46:03",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` when you want collapse several commits into one",
		"category": "git",
		"extras": "",
		"front": "when would you use `git reset soft`?",
		"id": 2814,
		"importId": "whenWouldYouUseGitResetSoft_whenYouWantCollapseSeveralCommitsIntoOne",
		"kind": "strategy",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-04 05:06:44",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.5",
		"status": "testing",
		"systemWhenCreated": "2020-08-03 16:46:03",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Ruby and Go, respectively",
		"category": "serverless",
		"extras": "",
		"front": "what languages do Jekyll and Hugo run on",
		"id": 2815,
		"importId": "whatLanguagesDoJekyllAndHugoRunOn_rubyAndGoRespectively",
		"kind": "fact",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-03 17:25:02",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `egrep -rn require\\(.+qsys.+\\) --exclude-dir=\"node_modules\" .` -r = recursive, -n = line numbers",
		"category": "linux",
		"extras": "",
		"front": "list all files in any subdirectory which has `require(...qsys...)` in them, except in node_modules",
		"id": 2816,
		"importId": "listAllFilesInAnySubdirectoryWhichHasRequireqsysInThemExceptInNodemodules_egrepRnRequireqsysExcludeDirnodemodules",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-10 04:01:31",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.82",
		"status": "testing",
		"systemWhenCreated": "2020-08-04 11:16:46",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `egrep -rn require\\(.+qsys.+\\) qtools` (notice that `grep` won't work)",
		"category": "linux",
		"extras": "",
		"front": "list all files in `qtools` which have `require(...qsys...)` in them",
		"id": 2817,
		"importId": "listAllFilesInQtoolsWhichHaveRequireqsysInThem_egrepRnRequireqsysQtoolsNoticeThatGrepWontWork",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:05:15",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.49",
		"status": "testing",
		"systemWhenCreated": "2020-08-04 11:16:46",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "egrep -rn required.+true --exclude-dir=node_modules --include=*.js --exclude=*min*",
		"category": "linux",
		"extras": "",
		"front": "list all files that have \"required....true\" EXCEPT in node_modules, EXCEPT the file ...min... and only in .js files",
		"id": 2818,
		"importId": "listAllFilesThatHaveRequiredtrueEXCEPTInNodemodulesEXCEPTTheFileMinAndOnlyInJsFiles_egrepRnRequiredtrueExcludeDirnodemodulesIncludejsExcludemin",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-10 04:00:22",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.9",
		"status": "testing",
		"systemWhenCreated": "2020-08-04 11:16:46",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "egrep -rni \"batch.+blocks\" --exclude-dir=\"node_modules\"",
		"category": "linux",
		"extras": "",
		"front": "list all files in project that have e.g. `batchImportBlocks` or `batchExportBlocks`, except in node_modules",
		"id": 2819,
		"importId": "listAllFilesInProjectThatHaveEgBatchImportBlocksOrBatchExportBlocksExceptInNodemodules_egrepRniBatchblocksExcludeDirnodemodules",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-05 04:23:16",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "4.04",
		"status": "testing",
		"systemWhenCreated": "2020-08-04 11:16:46",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `npm -g up gatsby-cli` (find out which need updating with: `npm -g outdated`)",
		"category": "npm",
		"extras": "",
		"front": "how to update a global package, e.g. gatsby-cli",
		"id": 2820,
		"importId": "howToUpdateAGlobalPackage_npmGUpGatsbyCliFindOutWhichNeedUpdatingWithNpmGOutdated",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-05 04:23:59",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.88",
		"status": "testing",
		"systemWhenCreated": "2020-08-05 09:20:47",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `egrep -rni \"super\\(.*id.*\\)\" --exclude-dir=node_modules` note that you need the quotation marks around the regex",
		"category": "linux",
		"extras": "",
		"front": "find all files that have super(..id..) in them, except in node_modules",
		"id": 2821,
		"importId": "findAllFilesThatHaveSuperidInThemExceptInNodemodules_egrepRniSuperidExcludeDirnodemodulesNoteThatYouNeedTheQuotationMarksAroundTheRegex",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-11 03:09:57",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 5,
		"pronunciation": "",
		"rank": "4.97",
		"status": "testing",
		"systemWhenCreated": "2020-08-05 10:16:44",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git add *` and `git reset *`",
		"category": "git",
		"extras": "",
		"front": "two commands to (1) add all changes to staged, (2) take them all back",
		"id": 2822,
		"importId": "twoCommandsTo1AddAllChangesToStaged2TakeThemAllBack_gitAddAndGitReset",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-08-07 05:11:24",
		"lastTested": "2020-08-07 05:11:24",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.91",
		"status": "learned",
		"systemWhenCreated": "2020-08-05 17:30:47",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `history | grep -P \"^\\s*\\d*\\s*git\"` (note egrep don't work since it doesn't have \\d apparently but [[:digit:]])",
		"category": "linux",
		"extras": "",
		"front": "how to list all commands in history that start with `ls`",
		"id": 2823,
		"importId": "howToListAllCommandsInHistoryThatStartWithLs_historyGrepPSdsgitNoteEgrepDontWorkSinceItDoesntHaveDApparentlyButDigit",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:03:38",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "4.3",
		"status": "testing",
		"systemWhenCreated": "2020-08-05 17:30:47",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "click start and type `winver`",
		"category": "windows",
		"extras": "",
		"front": "how to determine windows version, e.g. 1607, 1909, etc. \t",
		"id": 2824,
		"importId": "howToDetermineWindowsVersionEg167199Etc_clickStartAndTypeWinver",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-06 00:08:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git checkout -b 01_02b origin/01_02b",
		"category": "git",
		"extras": "",
		"front": "how to pull a remote branch down and switch to it",
		"id": 2826,
		"importId": "howToPullARemoteBranchDownAndSwitchToIt_gitCheckoutB12bOrigin12b",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-10 04:01:57",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "4.72",
		"status": "testing",
		"systemWhenCreated": "2020-08-07 19:07:44",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "http://portquiz.net:27017",
		"category": "network",
		"extras": "",
		"front": "how to check if your point to access e.g. port 27017",
		"id": 2827,
		"importId": "howToCheckIfYourPointToAccessEgPort2717_httpportquiznet2717",
		"kind": "tool",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-07 23:30:43",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "search for `^\\s` and replace with nothing",
		"category": "Notepad++",
		"extras": "",
		"front": "how to remove all blank lines",
		"id": 2828,
		"importId": "howToRemoveAllBlankLines_searchForSAndReplaceWithNothing",
		"kind": "regex",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-11 10:58:20",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "(run windows cmd as administrator)\nnetstat -ano | findstr :3001\n(shows LISTENING NNNNN)\ntaskkill /PID NNNN /F",
		"category": "windows",
		"extras": "",
		"front": "how to kill a process listening to a port",
		"id": 2829,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-08-12 04:20:42",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "const Header = ({ title }) => { \n\treturn (",
		"category": "React",
		"extras": "",
		"front": "what is the syntax of a function component",
		"id": 2830,
		"importId": "",
		"kind": "code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-08-12 15:05:42",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` include the statement `debugger;` in the text",
		"category": "developerPanel",
		"extras": "",
		"front": "how debug through code",
		"id": 2831,
		"importId": "",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-08-12 15:05:42",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "class Header extends React.Component { \n\trender() {",
		"category": "React",
		"extras": "",
		"front": "what is the syntax of a class component",
		"id": 2832,
		"importId": "",
		"kind": "code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-08-12 15:05:42",
		"systemWhoCreated": "systemUnknown"
	}
]